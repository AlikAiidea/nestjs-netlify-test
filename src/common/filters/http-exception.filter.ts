import { Response } from 'express'

import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common'

import { ErrorResponseDto } from '../dto/error-response.dto'
import { WinstonLogger } from '../utils/logger'

/**
 * Converting the exception model generated by the server to the specific model of the project.
 * @version 1.0
 */
@Catch()
export class HttpExceptionFilter implements ExceptionFilter {
  private logger = new WinstonLogger()
  catch(exception: any, host: ArgumentsHost) {
    const ctx = host.switchToHttp()
    const response = ctx.getResponse<Response>()

    const status = +exception.statusCode || +exception.response.status || 500
    if (status == 500) this.logger.error('internal server error', exception)
    let finalResponse: ErrorResponseDto | any
    if (typeof exception == 'object' || typeof exception.response == 'object') {
      let error: any = exception
      if (exception.response) {
        error = exception.response.error
          ? exception.response.error
          : exception.response.message
          ? exception.response.message
          : exception.response
      }
      finalResponse = {
        statusCode: status,
        error,
        name: exception.name,
        alert: exception?.response?.message || exception?.response,
      }
    } else if (typeof exception == 'string') {
      finalResponse = {
        statusCode: status,
        error: exception,
        name: 'Exception',
        alert: exception,
      }
    } else finalResponse = exception

    response.status(status).json(finalResponse)
  }
}
